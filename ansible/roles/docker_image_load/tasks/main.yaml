---
# Copyright 2019 Nokia
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# TODO: these should be changed to use docker image module. However, the name and the tag should be stored and replaced separately in Ansible dictionary to be able to do that
- name: import docker containers
  shell: "case `file {{ image_directory }}/{{ item }}*{{ image_file_extension }} | cut -d' ' -f2` in gzip) cat=zcat;; XZ) cat=xzcat;; esac; /usr/bin/$cat {{ image_directory }}/{{ item }}*{{ image_file_extension }} | /usr/bin/docker load -q"
  register: loaded_containers
  with_items: "{{ images | mandatory }}"
  environment: "{{ docker_environment }}"

- name: parse loaded images' full name
  register: parsed_containers_full_names
  set_fact:
    image_full_name: "{{ item.stdout | regex_replace('Loaded image: (?P<image>[\\w\\.\\-:\\/_]+)', '\\g<image>') }}"
  with_items:
    "{{ loaded_containers.results }}"

- name: parse loaded images' base name
  set_fact:
    # getting the name of image, then strip the repo path and the tag from it
    image_base_name: "{{ item.stdout | regex_replace('Loaded image: ([\\w\\.\\:]+/)?(?P<name>[\\w\\.\\-:\\/_]+)', '\\g<name>') | regex_replace('(:[\\w\\-_\\.]+)$', '') | basename }}"
  register: parsed_image_base_names
  with_items:
   "{{ loaded_containers.results }}"

- name: parse loaded images' tag
  set_fact:
    # getting the name of image
    image_tag: "{{ item.stdout | regex_replace('Loaded image: ([\\w\\.\\:]+/)?(?P<name>[\\w\\.\\-\\/_]+)', '\\g<name>') | regex_replace('.*:([\\w\\-_\\.]+)$', '\\1') }}"
  register: parsed_image_tags
  with_items:
    "{{ loaded_containers.results }}"

- name: save the parsed infra image names
  set_fact:
    loaded_images: "{{ parsed_containers_full_names.results | map(attribute='ansible_facts.image_full_name') | list }}"
    loaded_base_images: "{{ parsed_image_base_names.results | map(attribute='ansible_facts.image_base_name') | list }}"
    loaded_image_tags: "{{ parsed_image_tags.results | map(attribute='ansible_facts.image_tag') | list }}"

- name: assemble new image names
  set_fact:
    image_name: "{{ registry }}/{{ registry_repo }}/{{ item.0 }}:{{ item.1 }}"
  register: assembled_new_images
  with_together:
    - "{{ loaded_base_images }}"
    - "{{ loaded_image_tags }}"

- name: save retagged infra image names
  set_fact:
    retagged_images: "{{ assembled_new_images.results | map(attribute='ansible_facts.image_name') | list }}"

- name: retag loaded images
  shell: "/usr/bin/docker tag {{ item.0 }} {{ item.1 }}"
  with_together:
    - "{{ loaded_images }}"
    - "{{ retagged_images }}"
  environment: "{{ docker_environment }}"

- name: delete loaded image's tag
  shell: "/usr/bin/docker image rm {{ item }}"
  with_items: "{{ loaded_images }}"
  when: item not in retagged_images
  environment: "{{ docker_environment }}"

# TODO: Save container images as a dictionary
- name: save the parsed image names
  set_fact:
    container_image_names: "{{ container_image_names | default([]) }} + {{ retagged_images }}"

